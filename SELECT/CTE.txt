https://www.essentialsql.com/introduction-common-table-expressions-ctes/
https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?view=sql-server-ver15

A CTE (Common Table Expression) is temporary result set that 
you can reference within another SELECT, INSERT, UPDATE, or DELETE statement.

- Non recursive CTE’s
- Recursive CTE’s

1. Readability – CTE’s promote readability. Rather than lump all you query logic into one large query, create several CTE’s, which are the combined later in the statement.  This lets you get the chunks of data you need and combine them in a final SELECT.
2. Substitute for a View – You can substitute a CTE for a view. This is handy if you don’t have permissions to create a view object or you don’t want to create one as it is only used in this one query.
3. Recursion – Use CTE’s do create recursive queries, that is queries that can call themselves. This is handy when you need to work on hierarchical data such as organization charts.
4. Limitations – Overcome SELECT statement limitations, such as referencing itself (recursion), or performing GROUP BY using non-deterministic functions.
5. Ranking – Whenever you want to use ranking function such as ROW_NUMBER(), RANK(), NTILE() etc.

---
;WITH Employee_CTE (EmployeeNumber, Title) AS ( 
    SELECT NationalIDNumber, JobTitle
       FROM   HumanResources.Employee
)
SELECT EmployeeNumber, Title
  FROM Employee_CTE

NationalIDNumber --> EmployeeNumber
JobTitle         --> Title

---
;WITH PersonCTE (BusinessEntityID, FirstName, LastName) AS (
    SELECT Person.BusinessEntityID,
               FirstName,
               LastName
        FROM   Person.Person
        WHERE  LastName LIKE 'C%'
),
        
PhoneCTE (BusinessEntityID, PhoneNumber) AS (
    SELECT BusinessEntityID, PhoneNumber
     FROM   Person.PersonPhone
)
SELECT FirstName, LastName, PhoneNumber
  FROM  PersonCTE
 INNER JOIN PhoneCTE ON PersonCTE.BusinessEntityID = PhoneCTE.BusinessEntityID;

---
;WITH CTE_SalesPerson (SalesPersonID, SalesCount) AS (
      SELECT SalesPersonID, count(*)
        FROM [AdventureWorks].[Sales].[SalesOrderHeader]
       WHERE SubTotal > 500  --input parameter
    GROUP BY SalesPersonID
      HAVING SalesPersonID is not null
    --ORDER BY SalesPersonID
)
SELECT SalesPersonID, (P.FirstName + ' ' + P.LastName) AS SalesName, SalesCount 
  from CTE_SalesPerson AS S
 INNER JOIN  [AdventureWorks].[Person].[Person] AS P ON P.BusinessEntityID = S.SalesPersonID
 
SalesPersonID SalesName                   SalesCount
------------- --------------------------- -----------
284           Tete Mensa-Annan            122
278           Garrett Vargas              205
281           Shu Ito                     231
275           Michael Blythe              392
276           Linda Mitchell              366
287           Amy Alberts                 33
279           Tsvi Reiter                 361
290           Ranjit Varkey Chudukatil    150
282           José Saraiva                237
288           Rachel Valdez               107
285           Syed Abbas                  14
274           Stephen Jiang               41
286           Lynn Tsoflias               94
280           Pamela Ansman-Wolfe         88
289           Jae Pak                     300
283           David Campbell              148
277           Jillian Carson              402

(17 rows affected)

---
;WITH CTE_employee ( BusinessEntityID ) AS (
	SELECT [BusinessEntityID]
	  FROM [AdventureWorks].[HumanResources].[Employee]
	  --where gender = 'F'
	  where VacationHours > 59
)
SELECT *
  FROM [AdventureWorks].[Purchasing].[PurchaseOrderHeader] AS P
INNER JOIN CTE_employee AS E ON E.BusinessEntityID = P.EmployeeID;
---

;WITH CTE_employee ( BusinessEntityID ) AS (
    SELECT [BusinessEntityID]
      FROM [AdventureWorks].[HumanResources].[Employee]
      --where gender = 'F'
      where VacationHours > 59
),

---Chained CTE
CTE_entity ( BusinessEntityID ) AS (
    SELECT LEFT([BusinessEntityID],2) AS Entity
      FROM CTE_employee
)

SELECT *
  FROM [AdventureWorks].[Purchasing].[PurchaseOrderHeader] AS P
 INNER JOIN CTE_employee AS E ON E.BusinessEntityID = P.EmployeeID;

===
;WITH CTE1 AS (
    SELECT 1 AS Col1
),
CTE2 AS (
    SELECT COL1+1 AS Col2 
    FROM CTE1   ---Chained CTE
)
SELECT CTE1.Col1, CTE2.Col2
  FROM CTE1
 CROSS JOIN CTE2
GO

===Rank, Row_Number
WITH RankedData AS
(
	SELECT
		SD.RecordId,
		SD.TypeId,
		SD.ActivityDate,
		SD.MessageText,
    	  Rank() OVER 
			(PARTITION BY SD.TypeId 
			     ORDER BY SD.ActivityDate DESC) AS 
        ActivityRank,
        ROW_NUMBER() OVER 
            (PARTITION BY city
                 ORDER BY first_name) AS
        Row_Num,
        ROW_NUMBER() OVER
            (ORDER BY EmpName) AS
        Row_Number  
    FROM SampleData SD
)
SELECT * FROM RankedData

===recursive 
WITH DirectReports(ManagerID, EmployeeID, Title, EmployeeLevel) AS   
(  
    SELECT ManagerID, EmployeeID, Title, 0 AS EmployeeLevel  
    FROM dbo.MyEmployees   
    WHERE ManagerID IS NULL  
    UNION ALL  
    SELECT e.ManagerID, e.EmployeeID, e.Title, EmployeeLevel + 1  
    FROM dbo.MyEmployees AS e  
        INNER JOIN DirectReports AS d  
        ON e.ManagerID = d.EmployeeID   
)  
SELECT ManagerID, EmployeeID, Title, EmployeeLevel   
FROM DirectReports  
ORDER BY ManagerID;  

