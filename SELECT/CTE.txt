https://www.essentialsql.com/introduction-common-table-expressions-ctes/

A CTE (Common Table Expression) is temporary result set that 
you can reference within another SELECT, INSERT, UPDATE, or DELETE statement.

- Non recursive CTE’s
- Recursive CTE’s

1. Readability – CTE’s promote readability. Rather than lump all you query logic into one large query, create several CTE’s, which are the combined later in the statement.  This lets you get the chunks of data you need and combine them in a final SELECT.
2. Substitute for a View – You can substitute a CTE for a view. This is handy if you don’t have permissions to create a view object or you don’t want to create one as it is only used in this one query.
3. Recursion – Use CTE’s do create recursive queries, that is queries that can call themselves. This is handy when you need to work on hierarchical data such as organization charts.
4. Limitations – Overcome SELECT statement limitations, such as referencing itself (recursion), or performing GROUP BY using non-deterministic functions.
5. Ranking – Whenever you want to use ranking function such as ROW_NUMBER(), RANK(), NTILE() etc.

---
;WITH Employee_CTE (EmployeeNumber, Title) AS ( 
    SELECT NationalIDNumber, JobTitle
       FROM   HumanResources.Employee
)
SELECT EmployeeNumber, Title
  FROM Employee_CTE

NationalIDNumber --> EmployeeNumber
JobTitle         --> Title

---
;WITH PersonCTE (BusinessEntityID, FirstName, LastName) AS (
    SELECT Person.BusinessEntityID,
               FirstName,
               LastName
        FROM   Person.Person
        WHERE  LastName LIKE 'C%'
),
        
PhoneCTE (BusinessEntityID, PhoneNumber) AS (
    SELECT BusinessEntityID, PhoneNumber
     FROM   Person.PersonPhone
)
SELECT FirstName, LastName, PhoneNumber
  FROM  PersonCTE
 INNER JOIN PhoneCTE ON PersonCTE.BusinessEntityID = PhoneCTE.BusinessEntityID;
 
---
;WITH CTE_employee ( BusinessEntityID ) AS (
	SELECT [BusinessEntityID]
	  FROM [AdventureWorks].[HumanResources].[Employee]
	  --where gender = 'F'
	  where VacationHours > 59
)
SELECT *
  FROM [AdventureWorks].[Purchasing].[PurchaseOrderHeader] AS P
INNER JOIN CTE_employee AS E ON E.BusinessEntityID = P.EmployeeID;
