
====================================================================================================
/* 테이블 생성 */
    create table [테이블명] (
        id int, 
        name varchar(20)
    );
    
/* AUTO INCREMENT */
    CREATE TABLE departments
    ( department_id int IDENTITY(1,1) NOT NULL,
      department_name char(50) NOT NULL,
      CONSTRAINT departments_pk PRIMARY KEY (department_id)
    );

/* SEED & RE-SEED */
    ----------------------------------------------------
    Identity Serial Number를 0으로부터 시작하도록 Reset하는 기능
    ----------------------------------------------------
    DBCC CheckIdent (DB_Table_Name, RESEED, 0)

/* PRIMARY KEY */
    CREATE TABLE departments
    ( department_id int PRIMARY KEY NOT NULL,
      department_name char(50) NOT NULL
    );

    CREATE TABLE departments
    ( department_id int NOT NULL,
      department_name char(50) NOT NULL,
      CONSTRAINT departments_pk PRIMARY KEY (department_id)
    );

/* FORIEGN KEY */
    CREATE TABLE Orders (
        OrderID int NOT NULL PRIMARY KEY,
        OrderNumber int NOT NULL,
        PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
    );

    CREATE TABLE Orders (
        OrderID int NOT NULL,
        OrderNumber int NOT NULL,
        PersonID int,
        PRIMARY KEY (OrderID),
        CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
    );

    ALTER TABLE Orders
        ADD CONSTRAINT FK_PersonOrder
        FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

    ALTER TABLE Orders
        DROP CONSTRAINT FK_PersonOrder;
        
/* RESTRICTION */   https://www.w3schools.com/sql/sql_check.asp
                    https://www.w3schools.com/sql/sql_constraints.asp

    - NOT NULL - Ensures that a column cannot have a NULL value
    - UNIQUE - Ensures that all values in a column are different
    - PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    - FOREIGN KEY - Uniquely identifies a row/record in another table
    - CHECK - Ensures that all values in a column satisfies a specific condition
    - DEFAULT - Sets a default value for a column when no value is specified
    - INDEX - Used to create and retrieve data from the database very quickly
                        
    CREATE TABLE Persons (
        ID int NOT NULL,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Age int CHECK (Age>=18)
    );

    CREATE TABLE Persons (
        ID int NOT NULL,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Age int,
        City varchar(255),
        CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
    );
    
/* RE-INDEX */
    ========================================================
    DBCC DBREINDEX - All Tables
    ========================================================
    USE calsysbo
    EXEC sp_MSforeachtable @command1="print '?' DBCC DBREINDEX ('?', ' ', 80)"
    EXEC sp_updatestats

    sp_Tables: List all tables names
    --------------------------------------------
    EXEC sp_MSforeachtable @command1="print '?'" --> 모든 Table List를 Display한다.
    --------------------------------------------
    [dbo].[Categories]
    [dbo].[Contacts]
    [dbo].[CustomerCustomerDemo]
    [dbo].[CustomerDemographics]
    [dbo].[Customers]
    [dbo].[Employees]
    [dbo].[EmployeeTerritories]
    [dbo].[Details]
    [dbo].[inventory_consist_update]
    [dbo].[photo]
    
    -----------------------------------------------------
    DB REINDEX를 하면 LOG File의 SIZE가 커진다. 따라서 DB을 Backup한 다음 아래문장을 수행하여 Log Size를 줄여준다.
    -----------------------------------------------------
    use NorthWind;
    go

    ALTER DATABASE calsysbo SET RECOVERY SIMPLE
    DBCC SHRINKFILE (calsysbo_Log)
    ALTER DATABASE calsysbo SET RECOVERY FULL

====================================================================================================
IDENTITY_INSERT
----------------------------------------------------------------------------------------------------
    Identity로 설정된 Table은 자동으로 Serial번호가 증가한다. 
    따라서 새로 Insert되는 Record는 항상 마지막 번호를 사용하게 된다.
    그러나 DTS나 기타 Table COPY/INSERT from TEXT등의 경우에는 IDENTY INSERT가 자동으로 되면 안되고,
    항상 원본에 있는 값을 그대로 사용하여야 하는 경우가 발생한다. 
    이럴때 강제적으로 IDENTY항목에 대하여 INSERT를 해야 하는데 
    그 방법은 "IDENTITY_INSERT <TBL> ON" 하고 반드시 모든 Field명을 사용해야 한다.
    ------------------------------------------------------------------------------------------------

    SET IDENTITY_INSERT <Table_Name> ON 

    INSERT INTO <Table_Name> (ID, Name, Country) Values (1,'ABC',"USA') --> 반드시 모든 Field명을 사용해야 한다
    INSERT INTO <Table_Name> (ID, Name, Country) Values (1,'ABC',"USA') --> 반드시 모든 Field명을 사용해야 한다
    INSERT INTO <Table_Name> (ID, Name, Country) Values (1,'ABC',"USA') --> 반드시 모든 Field명을 사용해야 한다
    INSERT INTO <Table_Name> (ID, Name, Country) Values (1,'ABC',"USA') --> 반드시 모든 Field명을 사용해야 한다

    SET IDENTITY_INSERT <Table_Name> OFF  --> 반드시 강제 Identity항목에 대한 Insert기능을 OFF해 주어야 한다

    ------------------------------------------------------------------------------------------------
    그 다음부터는 Identity Isert Column은 INSERT에 기재하지 않는다.

    Insert into tblEmployees values('Mike','Male',5000)
    Insert into tblEmployees values('Pam','Female',3500)
    Insert into tblEmployees values('John','Male',2350)

====================================================================================================
sp_rename 'table_name', 'new_table_name';
====================================================================================================
/* 컬럼 추가 */
    
    ALTER TABLE dbo.TABLE_A
    ADD [Col_AB] varchar(10) NOT NULL DEFAULT 0, 
        [Col_AC] varchar(100) NULL,
        [Col_AD] [INT] NULL
        
    ALTER TABLE dbo.TABLE_A
    ADD [Col_AB] [INT] NOT NULL CONSTRAINT IsLimitedByNumOfUsers_Default DEFAULT 0,
        [Col_AC] varchar(100) NULL,
        [NumOfUsersLimit] [INT] NULL
        
/* 컬럼 변경 */
    ALTER TABLE table_name ALTER COLUMN column_name column_type;
    ALTER TABLE supplier   ALTER COLUMN supplier_name VARCHAR(100) NOT NULL,
    
/* 컬럼이름 변경 */
    sp_rename 'TABLE_A.Col_AB', 'Col_CC', 'COLUMN';
    
/* 컬럼 삭제 */
    ALTER TABLE departments
    DROP COLUMN department_name;

/* 컬럼명 변경 및 타입 변경 */
    ALTER TABLE TABLE_A 
    ALTER COLUMN Col_AB varchar(10) NULL

====================================================================================================
/* 테이블명 수정 */
    sp_rename 'table_name', 'new_table_name';

/* 테이블 삭제 */
    drop table [테이블명];

====================================================================================================
SQL Profiler를 Clear하기 위한 Procedure
---------------------------------------
CHECKPOINT;
GO
DBCC DROPCLEANBUFFERS; -- Clears query cache
GO
DBCC FREEPROCCACHE;    -- Clears execution plan cache

